#ifndef __IMPLEMENTATION_SIMPLE_H__
#define __IMPLEMENTATION_SIMPLE_H__

/* This file has been generated by http://github.com/fnchooft/CStructGen */
/* Make sure to update the originating structure-file                    */


#ifdef __cplusplus



#include "Simple.generated.h"
#include <stdio.h>
#include <string.h>
#include "jsonxx.h"
//Generated default toString,fromString,stream implementations for enumeration: AddDropType
std::string toString(AddDropType enumval, int32_t shortname)
{
  if(enumval == ADD_DROP_LOCAL){
    return shortname == 0 ? "ADD_DROP_LOCAL" : "local";
  }
  if(enumval == ADD_DROP_GLOBAL){
    return shortname == 0 ? "ADD_DROP_GLOBAL" : "global";
  }
  return shortname == 0 ? "??????" : "???";
} // toString for AddDropType


bool fromString(std::string svalue, AddDropType *enum_ptr)
{
  if(svalue == "ADD_DROP_LOCAL" || svalue == "local")         {
    *enum_ptr = ADD_DROP_LOCAL; return true;
  }
  if(svalue == "ADD_DROP_GLOBAL" || svalue == "global")       {
    *enum_ptr = ADD_DROP_GLOBAL; return true;
  }
  return false;
} // AddDropType_fromString


std::ostream & operator<<(std::ostream & out, const AddDropType adddroptype)
{
  out << toString(adddroptype);
  return out;
} // AddDropType stream-operator



// Generated default printers for struct: AddDrop
std::ostream & operator<<(std::ostream & out, const AddDrop & adddrop) {
    out << "localId:"    << " "  << adddrop.localId               << ", ";
    out << "transportPlaneId:" << " " << adddrop.transportPlaneId << ", ";
    out << "type:"       << " "  << adddrop.type                  << "";
    return out;
}


std::string toString(const AddDrop & adddrop) {
    std::stringstream out;
    std::string ret = "";
    out << adddrop;
    ret = out.str();
    return ret;
}


// struct: AddDrop compare-functions due to union existance...
// Found Struct->settings.... 0
// Generated default compare implementation for struct: AddDrop
bool operator<(AddDrop lhs, AddDrop rhs) {
    if (lhs.localId    < rhs.localId)    return true;
    if (lhs.localId    > rhs.localId)    return false;
    if (lhs.transportPlaneId < rhs.transportPlaneId) return true;
    if (lhs.transportPlaneId > rhs.transportPlaneId) return false;
    if (lhs.type       < rhs.type)       return true;
    if (lhs.type       > rhs.type)       return false;
    return false;
}
bool operator<=(AddDrop lhs, AddDrop rhs) {
    if ((lhs < rhs) || (lhs == rhs)){
        return true;
    } else {
        return false;
    }
}
bool operator>(AddDrop lhs, AddDrop rhs) {
    return !(lhs <= rhs);
}
bool operator>=(AddDrop lhs, AddDrop rhs) {
    return !(lhs < rhs);
}
bool operator==(AddDrop lhs, AddDrop rhs){
    if (lhs.localId    != rhs.localId)    return false;
    if (lhs.transportPlaneId != rhs.transportPlaneId) return false;
    if (lhs.type       != rhs.type)       return false;
    return true;
}
bool operator!=(AddDrop lhs, AddDrop rhs) {
    return !(lhs == rhs);
}


// Generated toJsonString / fromJsonString implementation for struct: AddDrop
std::string toJsonString(AddDrop *input) {
  jsonxx::Object jsono;
  jsono << "localId" << (unsigned int)input->localId;
  jsono << "transportPlaneId" << (std::string)input->transportPlaneId;
  jsono << "type" << toString(input->type);
  return jsono.json();
}


int32_t fromJson(AddDrop *output, std::string jsondata) {
  jsonxx::Object json;
  if(!json.parse(jsondata))
  {
    return -2048;
  }
  if(json.has<jsonxx::Number>("localId"))
  {
    output->localId = (unsigned int)json.get<jsonxx::Number>("localId");
  }
  if(json.has<jsonxx::String>("transportPlaneId"))
  {
    output->transportPlaneId = (std::string)json.get<jsonxx::String>("transportPlaneId");
  }
  if(json.has<jsonxx::String>("type"))
  {
    if(fromString(json.get<jsonxx::String>("type"),&output->type) == false)
    {
      return -3;
    }
  }
  return 0;
}

// Generated default printers for struct: Simple
std::ostream & operator<<(std::ostream & out, const Simple & simple) {
    out << "is_on:"      << " "  << simple.is_on                  << ", ";
    out << "var_vector_of_bool:" << " [ ";
    for (std::vector<bool >::const_iterator it=simple.var_vector_of_bool.begin(); it != simple.var_vector_of_bool.end(); ++it)
    {
      out << *it;
      if(it != simple.var_vector_of_bool.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "var_vector_of_int:" << " [ ";
    for (std::vector<int32_t >::const_iterator it=simple.var_vector_of_int.begin(); it != simple.var_vector_of_int.end(); ++it)
    {
      out << *it;
      if(it != simple.var_vector_of_int.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "var_uint08:" << " "  << simple.var_uint08             << ", ";
    out << "var_uint16:" << " "  << simple.var_uint16             << ", ";
    out << "var_uint32:" << " "  << simple.var_uint32             << ", ";
    out << "var_uint64:" << " "  << simple.var_uint64             << ", ";
    out << "vector_of_uint08:" << " [ ";
    for (std::vector<uint8_t >::const_iterator it=simple.vector_of_uint08.begin(); it != simple.vector_of_uint08.end(); ++it)
    {
      out << *it;
      if(it != simple.vector_of_uint08.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "vector_of_uint16:" << " [ ";
    for (std::vector<uint16_t >::const_iterator it=simple.vector_of_uint16.begin(); it != simple.vector_of_uint16.end(); ++it)
    {
      out << *it;
      if(it != simple.vector_of_uint16.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "vector_of_uint32:" << " [ ";
    for (std::vector<uint32_t >::const_iterator it=simple.vector_of_uint32.begin(); it != simple.vector_of_uint32.end(); ++it)
    {
      out << *it;
      if(it != simple.vector_of_uint32.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "vector_of_uint64:" << " [ ";
    for (std::vector<uint64_t >::const_iterator it=simple.vector_of_uint64.begin(); it != simple.vector_of_uint64.end(); ++it)
    {
      out << *it;
      if(it != simple.vector_of_uint64.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "list_of_uint08:" << " [ ";
    for (std::list<uint8_t >::const_iterator it=simple.list_of_uint08.begin(); it != simple.list_of_uint08.end(); ++it)
    {
      out << *it;
      if(it != simple.list_of_uint08.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "list_of_uint16:" << " [ ";
    for (std::list<uint16_t >::const_iterator it=simple.list_of_uint16.begin(); it != simple.list_of_uint16.end(); ++it)
    {
      out << *it;
      if(it != simple.list_of_uint16.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "list_of_uint32:" << " [ ";
    for (std::list<uint32_t >::const_iterator it=simple.list_of_uint32.begin(); it != simple.list_of_uint32.end(); ++it)
    {
      out << *it;
      if(it != simple.list_of_uint32.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "list_of_uint64:" << " [ ";
    for (std::list<uint64_t >::const_iterator it=simple.list_of_uint64.begin(); it != simple.list_of_uint64.end(); ++it)
    {
      out << *it;
      if(it != simple.list_of_uint64.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "var_int08:"  << " "  << simple.var_int08              << ", ";
    out << "var_int16:"  << " "  << simple.var_int16              << ", ";
    out << "var_int32:"  << " "  << simple.var_int32              << ", ";
    out << "var_int64:"  << " "  << simple.var_int64              << ", ";
    out << "vector_of_int8:" << " [ ";
    for (std::vector<int8_t >::const_iterator it=simple.vector_of_int8.begin(); it != simple.vector_of_int8.end(); ++it)
    {
      out << *it;
      if(it != simple.vector_of_int8.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "vector_of_int16:" << " [ ";
    for (std::vector<int16_t >::const_iterator it=simple.vector_of_int16.begin(); it != simple.vector_of_int16.end(); ++it)
    {
      out << *it;
      if(it != simple.vector_of_int16.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "vector_of_int32:" << " [ ";
    for (std::vector<int32_t >::const_iterator it=simple.vector_of_int32.begin(); it != simple.vector_of_int32.end(); ++it)
    {
      out << *it;
      if(it != simple.vector_of_int32.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "vector_of_int64:" << " [ ";
    for (std::vector<int64_t >::const_iterator it=simple.vector_of_int64.begin(); it != simple.vector_of_int64.end(); ++it)
    {
      out << *it;
      if(it != simple.vector_of_int64.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "list_of_int8:" << " [ ";
    for (std::list<int8_t >::const_iterator it=simple.list_of_int8.begin(); it != simple.list_of_int8.end(); ++it)
    {
      out << *it;
      if(it != simple.list_of_int8.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "list_of_int16:" << " [ ";
    for (std::list<int16_t >::const_iterator it=simple.list_of_int16.begin(); it != simple.list_of_int16.end(); ++it)
    {
      out << *it;
      if(it != simple.list_of_int16.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "list_of_int32:" << " [ ";
    for (std::list<int32_t >::const_iterator it=simple.list_of_int32.begin(); it != simple.list_of_int32.end(); ++it)
    {
      out << *it;
      if(it != simple.list_of_int32.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "list_of_int64:" << " [ ";
    for (std::list<int64_t >::const_iterator it=simple.list_of_int64.begin(); it != simple.list_of_int64.end(); ++it)
    {
      out << *it;
      if(it != simple.list_of_int64.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "var_string:" << " "  << simple.var_string             << ", ";
    out << "var_float:"  << " "  << simple.var_float              << ", ";
    out << "var_double:" << " "  << simple.var_double             << ", ";
    out << "var_long:"   << " "  << simple.var_long               << ", ";
    out << "var_in_addr:" << " " << simple.var_in_addr            << ", ";
    out << "vector_of_in_addr:" << " [ ";
    for (std::vector<in_addr >::const_iterator it=simple.vector_of_in_addr.begin(); it != simple.vector_of_in_addr.end(); ++it)
    {
      out << *it;
      if(it != simple.vector_of_in_addr.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "list_of_in_addr:" << " [ ";
    for (std::list<in_addr >::const_iterator it=simple.list_of_in_addr.begin(); it != simple.list_of_in_addr.end(); ++it)
    {
      out << *it;
      if(it != simple.list_of_in_addr.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "vc:" << " [ ";
    for (std::vector<float >::const_iterator it=simple.vc.begin(); it != simple.vc.end(); ++it)
    {
      out << *it;
      if(it != simple.vc.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "map_uint8_t_string_map:" << " [ ";
    for (
         std::map<uint8_t,std::string >::const_iterator it=simple.map_uint8_t_string_map.begin();
         it != simple.map_uint8_t_string_map.end(); 
         ++it
	     )
    {
      out << it->first << ":" << it->second;
      if(it != simple.map_uint8_t_string_map.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "map_uint8_t_add_drop_map:" << " [ ";
    for (
         std::map<uint8_t,AddDrop >::const_iterator it=simple.map_uint8_t_add_drop_map.begin();
         it != simple.map_uint8_t_add_drop_map.end(); 
         ++it
	     )
    {
      out << it->first << ":" << it->second;
      if(it != simple.map_uint8_t_add_drop_map.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "vector_of_string:" << " [ ";
    for (std::vector<std::string >::const_iterator it=simple.vector_of_string.begin(); it != simple.vector_of_string.end(); ++it)
    {
      out << *it;
      if(it != simple.vector_of_string.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "list_of_string:" << " [ ";
    for (std::list<std::string >::const_iterator it=simple.list_of_string.begin(); it != simple.list_of_string.end(); ++it)
    {
      out << *it;
      if(it != simple.list_of_string.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "vector_of_enum_adddrop_type:" << " [ ";
    for (std::vector<AddDropType >::const_iterator it=simple.vector_of_enum_adddrop_type.begin(); it != simple.vector_of_enum_adddrop_type.end(); ++it)
    {
      out << *it;
      if(it != simple.vector_of_enum_adddrop_type.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "list_of_enum_adddrop_type:" << " [ ";
    for (std::list<AddDropType >::const_iterator it=simple.list_of_enum_adddrop_type.begin(); it != simple.list_of_enum_adddrop_type.end(); ++it)
    {
      out << *it;
      if(it != simple.list_of_enum_adddrop_type.end())
        out << ",";
    }
    out << " ] " << ", ";
    out << "set_of_enum_adddrop_type:" << " [ ";
    for (std::set<AddDropType >::const_iterator it=simple.set_of_enum_adddrop_type.begin(); it != simple.set_of_enum_adddrop_type.end(); ++it)
    {
      out << *it;
      if(it != simple.set_of_enum_adddrop_type.end())
        out << ",";
    }
    out << " ] " << "";
    return out;
}


std::string toString(const Simple & simple) {
    std::stringstream out;
    std::string ret = "";
    out << simple;
    ret = out.str();
    return ret;
}


// struct: Simple compare-functions due to union existance...
// Found Struct->settings.... 0
// Generated default compare implementation for struct: Simple
bool operator<(Simple lhs, Simple rhs) {
    if (lhs.is_on      < rhs.is_on)      return true;
    if (lhs.is_on      > rhs.is_on)      return false;
    if (lhs.var_vector_of_bool < rhs.var_vector_of_bool) return true;
    if (lhs.var_vector_of_bool > rhs.var_vector_of_bool) return false;
    if (lhs.var_vector_of_int < rhs.var_vector_of_int) return true;
    if (lhs.var_vector_of_int > rhs.var_vector_of_int) return false;
    if (lhs.var_uint08 < rhs.var_uint08) return true;
    if (lhs.var_uint08 > rhs.var_uint08) return false;
    if (lhs.var_uint16 < rhs.var_uint16) return true;
    if (lhs.var_uint16 > rhs.var_uint16) return false;
    if (lhs.var_uint32 < rhs.var_uint32) return true;
    if (lhs.var_uint32 > rhs.var_uint32) return false;
    if (lhs.var_uint64 < rhs.var_uint64) return true;
    if (lhs.var_uint64 > rhs.var_uint64) return false;
    if (lhs.vector_of_uint08 < rhs.vector_of_uint08) return true;
    if (lhs.vector_of_uint08 > rhs.vector_of_uint08) return false;
    if (lhs.vector_of_uint16 < rhs.vector_of_uint16) return true;
    if (lhs.vector_of_uint16 > rhs.vector_of_uint16) return false;
    if (lhs.vector_of_uint32 < rhs.vector_of_uint32) return true;
    if (lhs.vector_of_uint32 > rhs.vector_of_uint32) return false;
    if (lhs.vector_of_uint64 < rhs.vector_of_uint64) return true;
    if (lhs.vector_of_uint64 > rhs.vector_of_uint64) return false;
    if (lhs.list_of_uint08 < rhs.list_of_uint08) return true;
    if (lhs.list_of_uint08 > rhs.list_of_uint08) return false;
    if (lhs.list_of_uint16 < rhs.list_of_uint16) return true;
    if (lhs.list_of_uint16 > rhs.list_of_uint16) return false;
    if (lhs.list_of_uint32 < rhs.list_of_uint32) return true;
    if (lhs.list_of_uint32 > rhs.list_of_uint32) return false;
    if (lhs.list_of_uint64 < rhs.list_of_uint64) return true;
    if (lhs.list_of_uint64 > rhs.list_of_uint64) return false;
    if (lhs.var_int08  < rhs.var_int08)  return true;
    if (lhs.var_int08  > rhs.var_int08)  return false;
    if (lhs.var_int16  < rhs.var_int16)  return true;
    if (lhs.var_int16  > rhs.var_int16)  return false;
    if (lhs.var_int32  < rhs.var_int32)  return true;
    if (lhs.var_int32  > rhs.var_int32)  return false;
    if (lhs.var_int64  < rhs.var_int64)  return true;
    if (lhs.var_int64  > rhs.var_int64)  return false;
    if (lhs.vector_of_int8 < rhs.vector_of_int8) return true;
    if (lhs.vector_of_int8 > rhs.vector_of_int8) return false;
    if (lhs.vector_of_int16 < rhs.vector_of_int16) return true;
    if (lhs.vector_of_int16 > rhs.vector_of_int16) return false;
    if (lhs.vector_of_int32 < rhs.vector_of_int32) return true;
    if (lhs.vector_of_int32 > rhs.vector_of_int32) return false;
    if (lhs.vector_of_int64 < rhs.vector_of_int64) return true;
    if (lhs.vector_of_int64 > rhs.vector_of_int64) return false;
    if (lhs.list_of_int8 < rhs.list_of_int8) return true;
    if (lhs.list_of_int8 > rhs.list_of_int8) return false;
    if (lhs.list_of_int16 < rhs.list_of_int16) return true;
    if (lhs.list_of_int16 > rhs.list_of_int16) return false;
    if (lhs.list_of_int32 < rhs.list_of_int32) return true;
    if (lhs.list_of_int32 > rhs.list_of_int32) return false;
    if (lhs.list_of_int64 < rhs.list_of_int64) return true;
    if (lhs.list_of_int64 > rhs.list_of_int64) return false;
    if (lhs.var_string < rhs.var_string) return true;
    if (lhs.var_string > rhs.var_string) return false;
    if (lhs.var_float  < rhs.var_float)  return true;
    if (lhs.var_float  > rhs.var_float)  return false;
    if (lhs.var_double < rhs.var_double) return true;
    if (lhs.var_double > rhs.var_double) return false;
    if (lhs.var_long   < rhs.var_long)   return true;
    if (lhs.var_long   > rhs.var_long)   return false;
    if (lhs.var_in_addr < rhs.var_in_addr) return true;
    if (lhs.var_in_addr > rhs.var_in_addr) return false;
    if (lhs.vector_of_in_addr < rhs.vector_of_in_addr) return true;
    if (lhs.vector_of_in_addr > rhs.vector_of_in_addr) return false;
    if (lhs.list_of_in_addr < rhs.list_of_in_addr) return true;
    if (lhs.list_of_in_addr > rhs.list_of_in_addr) return false;
    if (lhs.vc         < rhs.vc)         return true;
    if (lhs.vc         > rhs.vc)         return false;
    if (lhs.map_uint8_t_string_map < rhs.map_uint8_t_string_map) return true;
    if (lhs.map_uint8_t_string_map > rhs.map_uint8_t_string_map) return false;
    if (lhs.map_uint8_t_add_drop_map < rhs.map_uint8_t_add_drop_map) return true;
    if (lhs.map_uint8_t_add_drop_map > rhs.map_uint8_t_add_drop_map) return false;
    if (lhs.vector_of_string < rhs.vector_of_string) return true;
    if (lhs.vector_of_string > rhs.vector_of_string) return false;
    if (lhs.list_of_string < rhs.list_of_string) return true;
    if (lhs.list_of_string > rhs.list_of_string) return false;
    if (lhs.vector_of_enum_adddrop_type < rhs.vector_of_enum_adddrop_type) return true;
    if (lhs.vector_of_enum_adddrop_type > rhs.vector_of_enum_adddrop_type) return false;
    if (lhs.list_of_enum_adddrop_type < rhs.list_of_enum_adddrop_type) return true;
    if (lhs.list_of_enum_adddrop_type > rhs.list_of_enum_adddrop_type) return false;
    if (lhs.set_of_enum_adddrop_type < rhs.set_of_enum_adddrop_type) return true;
    if (lhs.set_of_enum_adddrop_type > rhs.set_of_enum_adddrop_type) return false;
    return false;
}
bool operator<=(Simple lhs, Simple rhs) {
    if ((lhs < rhs) || (lhs == rhs)){
        return true;
    } else {
        return false;
    }
}
bool operator>(Simple lhs, Simple rhs) {
    return !(lhs <= rhs);
}
bool operator>=(Simple lhs, Simple rhs) {
    return !(lhs < rhs);
}
bool operator==(Simple lhs, Simple rhs){
    if (lhs.is_on      != rhs.is_on)      return false;
    if (lhs.var_vector_of_bool != rhs.var_vector_of_bool) return false;
    if (lhs.var_vector_of_int != rhs.var_vector_of_int) return false;
    if (lhs.var_uint08 != rhs.var_uint08) return false;
    if (lhs.var_uint16 != rhs.var_uint16) return false;
    if (lhs.var_uint32 != rhs.var_uint32) return false;
    if (lhs.var_uint64 != rhs.var_uint64) return false;
    if (lhs.vector_of_uint08 != rhs.vector_of_uint08) return false;
    if (lhs.vector_of_uint16 != rhs.vector_of_uint16) return false;
    if (lhs.vector_of_uint32 != rhs.vector_of_uint32) return false;
    if (lhs.vector_of_uint64 != rhs.vector_of_uint64) return false;
    if (lhs.list_of_uint08 != rhs.list_of_uint08) return false;
    if (lhs.list_of_uint16 != rhs.list_of_uint16) return false;
    if (lhs.list_of_uint32 != rhs.list_of_uint32) return false;
    if (lhs.list_of_uint64 != rhs.list_of_uint64) return false;
    if (lhs.var_int08  != rhs.var_int08)  return false;
    if (lhs.var_int16  != rhs.var_int16)  return false;
    if (lhs.var_int32  != rhs.var_int32)  return false;
    if (lhs.var_int64  != rhs.var_int64)  return false;
    if (lhs.vector_of_int8 != rhs.vector_of_int8) return false;
    if (lhs.vector_of_int16 != rhs.vector_of_int16) return false;
    if (lhs.vector_of_int32 != rhs.vector_of_int32) return false;
    if (lhs.vector_of_int64 != rhs.vector_of_int64) return false;
    if (lhs.list_of_int8 != rhs.list_of_int8) return false;
    if (lhs.list_of_int16 != rhs.list_of_int16) return false;
    if (lhs.list_of_int32 != rhs.list_of_int32) return false;
    if (lhs.list_of_int64 != rhs.list_of_int64) return false;
    if (lhs.var_string != rhs.var_string) return false;
    if (lhs.var_float  != rhs.var_float)  return false;
    if (lhs.var_double != rhs.var_double) return false;
    if (lhs.var_long   != rhs.var_long)   return false;
    if (lhs.var_in_addr != rhs.var_in_addr) return false;
    if (lhs.vector_of_in_addr != rhs.vector_of_in_addr) return false;
    if (lhs.list_of_in_addr != rhs.list_of_in_addr) return false;
    if (lhs.vc         != rhs.vc)         return false;
    if (lhs.map_uint8_t_string_map != rhs.map_uint8_t_string_map) return false;
    if (lhs.map_uint8_t_add_drop_map != rhs.map_uint8_t_add_drop_map) return false;
    if (lhs.vector_of_string != rhs.vector_of_string) return false;
    if (lhs.list_of_string != rhs.list_of_string) return false;
    if (lhs.vector_of_enum_adddrop_type != rhs.vector_of_enum_adddrop_type) return false;
    if (lhs.list_of_enum_adddrop_type != rhs.list_of_enum_adddrop_type) return false;
    if (lhs.set_of_enum_adddrop_type != rhs.set_of_enum_adddrop_type) return false;
    return true;
}
bool operator!=(Simple lhs, Simple rhs) {
    return !(lhs == rhs);
}


// Generated toJsonString / fromJsonString implementation for struct: Simple
std::string toJsonString(Simple *input) {
  jsonxx::Object jsono;
  jsono << "is_on" << (bool)input->is_on;
  jsonxx::Array jsona_var_vector_of_bool;
  for (std::vector<bool >::iterator it=input->var_vector_of_bool.begin(); it != input->var_vector_of_bool.end(); ++it)
  {
    jsona_var_vector_of_bool << (bool)*it;
  }
  jsono << "var_vector_of_bool" << jsona_var_vector_of_bool;
  jsonxx::Array jsona_var_vector_of_int;
  for (std::vector<int32_t >::iterator it=input->var_vector_of_int.begin(); it != input->var_vector_of_int.end(); ++it)
  {
    jsona_var_vector_of_int << (int)*it;
  }
  jsono << "var_vector_of_int" << jsona_var_vector_of_int;
  jsono << "var_uint08" << (unsigned int)input->var_uint08;
  jsono << "var_uint16" << (unsigned int)input->var_uint16;
  jsono << "var_uint32" << (unsigned int)input->var_uint32;
  jsono << "var_uint64" << (unsigned long)input->var_uint64;
  jsonxx::Array jsona_vector_of_uint08;
  for (std::vector<uint8_t >::iterator it=input->vector_of_uint08.begin(); it != input->vector_of_uint08.end(); ++it)
  {
    jsona_vector_of_uint08 << (unsigned int)*it;
  }
  jsono << "vector_of_uint08" << jsona_vector_of_uint08;
  jsonxx::Array jsona_vector_of_uint16;
  for (std::vector<uint16_t >::iterator it=input->vector_of_uint16.begin(); it != input->vector_of_uint16.end(); ++it)
  {
    jsona_vector_of_uint16 << (unsigned int)*it;
  }
  jsono << "vector_of_uint16" << jsona_vector_of_uint16;
  jsonxx::Array jsona_vector_of_uint32;
  for (std::vector<uint32_t >::iterator it=input->vector_of_uint32.begin(); it != input->vector_of_uint32.end(); ++it)
  {
    jsona_vector_of_uint32 << (unsigned int)*it;
  }
  jsono << "vector_of_uint32" << jsona_vector_of_uint32;
  jsonxx::Array jsona_vector_of_uint64;
  for (std::vector<uint64_t >::iterator it=input->vector_of_uint64.begin(); it != input->vector_of_uint64.end(); ++it)
  {
    jsona_vector_of_uint64 << (unsigned long)*it;
  }
  jsono << "vector_of_uint64" << jsona_vector_of_uint64;
  jsonxx::Array jsona_list_of_uint08;
  for (std::list<uint8_t >::iterator it=input->list_of_uint08.begin(); it != input->list_of_uint08.end(); ++it)
  {
    jsona_list_of_uint08 << (unsigned int)*it;
  }
  jsono << "list_of_uint08" << jsona_list_of_uint08;
  jsonxx::Array jsona_list_of_uint16;
  for (std::list<uint16_t >::iterator it=input->list_of_uint16.begin(); it != input->list_of_uint16.end(); ++it)
  {
    jsona_list_of_uint16 << (unsigned int)*it;
  }
  jsono << "list_of_uint16" << jsona_list_of_uint16;
  jsonxx::Array jsona_list_of_uint32;
  for (std::list<uint32_t >::iterator it=input->list_of_uint32.begin(); it != input->list_of_uint32.end(); ++it)
  {
    jsona_list_of_uint32 << (unsigned int)*it;
  }
  jsono << "list_of_uint32" << jsona_list_of_uint32;
  jsonxx::Array jsona_list_of_uint64;
  for (std::list<uint64_t >::iterator it=input->list_of_uint64.begin(); it != input->list_of_uint64.end(); ++it)
  {
    jsona_list_of_uint64 << (unsigned long)*it;
  }
  jsono << "list_of_uint64" << jsona_list_of_uint64;
  jsono << "var_int08" << (signed int)input->var_int08;
  jsono << "var_int16" << (signed int)input->var_int16;
  jsono << "var_int32" << (int)input->var_int32;
  jsono << "var_int64" << (long long)input->var_int64;
  jsonxx::Array jsona_vector_of_int8;
  for (std::vector<int8_t >::iterator it=input->vector_of_int8.begin(); it != input->vector_of_int8.end(); ++it)
  {
    jsona_vector_of_int8 << (signed int)*it;
  }
  jsono << "vector_of_int8" << jsona_vector_of_int8;
  jsonxx::Array jsona_vector_of_int16;
  for (std::vector<int16_t >::iterator it=input->vector_of_int16.begin(); it != input->vector_of_int16.end(); ++it)
  {
    jsona_vector_of_int16 << (signed int)*it;
  }
  jsono << "vector_of_int16" << jsona_vector_of_int16;
  jsonxx::Array jsona_vector_of_int32;
  for (std::vector<int32_t >::iterator it=input->vector_of_int32.begin(); it != input->vector_of_int32.end(); ++it)
  {
    jsona_vector_of_int32 << (int)*it;
  }
  jsono << "vector_of_int32" << jsona_vector_of_int32;
  jsonxx::Array jsona_vector_of_int64;
  for (std::vector<int64_t >::iterator it=input->vector_of_int64.begin(); it != input->vector_of_int64.end(); ++it)
  {
    jsona_vector_of_int64 << (long long)*it;
  }
  jsono << "vector_of_int64" << jsona_vector_of_int64;
  jsonxx::Array jsona_list_of_int8;
  for (std::list<int8_t >::iterator it=input->list_of_int8.begin(); it != input->list_of_int8.end(); ++it)
  {
    jsona_list_of_int8 << (signed int)*it;
  }
  jsono << "list_of_int8" << jsona_list_of_int8;
  jsonxx::Array jsona_list_of_int16;
  for (std::list<int16_t >::iterator it=input->list_of_int16.begin(); it != input->list_of_int16.end(); ++it)
  {
    jsona_list_of_int16 << (signed int)*it;
  }
  jsono << "list_of_int16" << jsona_list_of_int16;
  jsonxx::Array jsona_list_of_int32;
  for (std::list<int32_t >::iterator it=input->list_of_int32.begin(); it != input->list_of_int32.end(); ++it)
  {
    jsona_list_of_int32 << (int)*it;
  }
  jsono << "list_of_int32" << jsona_list_of_int32;
  jsonxx::Array jsona_list_of_int64;
  for (std::list<int64_t >::iterator it=input->list_of_int64.begin(); it != input->list_of_int64.end(); ++it)
  {
    jsona_list_of_int64 << (long long)*it;
  }
  jsono << "list_of_int64" << jsona_list_of_int64;
  jsono << "var_string" << (std::string)input->var_string;
  jsono << "var_float" << (float)input->var_float;
  jsono << "var_double" << (double)input->var_double;
  jsono << "var_long" << (long long)input->var_long;
  jsono << "var_in_addr" << toString(input->var_in_addr);
  jsonxx::Array jsona_vector_of_in_addr;
  for (std::vector<in_addr >::iterator it=input->vector_of_in_addr.begin(); it != input->vector_of_in_addr.end(); ++it)
  {
    jsona_vector_of_in_addr << toString(*it);
  }
  jsono << "vector_of_in_addr" << jsona_vector_of_in_addr;
  jsonxx::Array jsona_list_of_in_addr;
  for (std::list<in_addr >::iterator it=input->list_of_in_addr.begin(); it != input->list_of_in_addr.end(); ++it)
  {
    jsona_list_of_in_addr << toString(*it);
  }
  jsono << "list_of_in_addr" << jsona_list_of_in_addr;
  jsonxx::Array jsona_vc;
  for (std::vector<float >::iterator it=input->vc.begin(); it != input->vc.end(); ++it)
  {
    jsona_vc << (float)*it;
  }
  jsono << "vc" << jsona_vc;
  jsonxx::Array jsonm_map_uint8_t_string_map;
  // key-type: uint8_t key_type.id: _2922
  // map-type: std::string mapped_type.id: _2923
  for (
       std::map<uint8_t,std::string >::iterator it=input->map_uint8_t_string_map.begin();
       it != input->map_uint8_t_string_map.end(); 
       ++it
      )
  {
    jsonxx::Object map_entry;
  map_entry << "key" << (unsigned int)it->first;
  map_entry << "val" << it->second;
    jsonm_map_uint8_t_string_map << map_entry;
  }
  jsono << "map_uint8_t_string_map" << jsonm_map_uint8_t_string_map;
  jsonxx::Array jsonm_map_uint8_t_add_drop_map;
  // key-type: uint8_t key_type.id: _2981
  // map-type: AddDrop mapped_type.id: _2982
  for (
       std::map<uint8_t,AddDrop >::iterator it=input->map_uint8_t_add_drop_map.begin();
       it != input->map_uint8_t_add_drop_map.end(); 
       ++it
      )
  {
    jsonxx::Object map_entry;
  map_entry << "key" << (unsigned int)it->first;
  jsonxx::Object MapVal_map_uint8_t_add_drop_map_object;
  if(MapVal_map_uint8_t_add_drop_map_object.parse(toJsonString(&it->second)) != 1)
    return "BROKEN map_uint8_t_add_drop_map_object";
  map_entry << "val" << MapVal_map_uint8_t_add_drop_map_object;
    jsonm_map_uint8_t_add_drop_map << map_entry;
  }
  jsono << "map_uint8_t_add_drop_map" << jsonm_map_uint8_t_add_drop_map;
  jsonxx::Array jsona_vector_of_string;
  for (std::vector<std::string >::iterator it=input->vector_of_string.begin(); it != input->vector_of_string.end(); ++it)
  {
    jsona_vector_of_string << *it;
  }
  jsono << "vector_of_string" << jsona_vector_of_string;
  jsonxx::Array jsona_list_of_string;
  for (std::list<std::string >::iterator it=input->list_of_string.begin(); it != input->list_of_string.end(); ++it)
  {
    jsona_list_of_string << *it;
  }
  jsono << "list_of_string" << jsona_list_of_string;
  jsonxx::Array jsona_vector_of_enum_adddrop_type;
  for (std::vector<AddDropType >::iterator it=input->vector_of_enum_adddrop_type.begin(); it != input->vector_of_enum_adddrop_type.end(); ++it)
  {
    jsona_vector_of_enum_adddrop_type << (std::string)toString(*it);
  }
  jsono << "vector_of_enum_adddrop_type" << jsona_vector_of_enum_adddrop_type;
  jsonxx::Array jsona_list_of_enum_adddrop_type;
  for (std::list<AddDropType >::iterator it=input->list_of_enum_adddrop_type.begin(); it != input->list_of_enum_adddrop_type.end(); ++it)
  {
    jsona_list_of_enum_adddrop_type << (std::string)toString(*it);
  }
  jsono << "list_of_enum_adddrop_type" << jsona_list_of_enum_adddrop_type;
  jsonxx::Array jsona_set_of_enum_adddrop_type;
  for (std::set<AddDropType >::iterator it=input->set_of_enum_adddrop_type.begin(); it != input->set_of_enum_adddrop_type.end(); ++it)
  {
    jsona_set_of_enum_adddrop_type << (std::string)toString(*it);
  }
  jsono << "set_of_enum_adddrop_type" << jsona_set_of_enum_adddrop_type;
  return jsono.json();
}


int32_t fromJson(Simple *output, std::string jsondata) {
  jsonxx::Object json;
  if(!json.parse(jsondata))
  {
    return -2048;
  }
  if(json.has<jsonxx::Boolean>("is_on"))
  {
    output->is_on = (bool)json.get<jsonxx::Boolean>("is_on");
  }
  if(json.has<jsonxx::Array>("var_vector_of_bool"))
  {
    jsonxx::Array var_vector_of_bool_array = json.get<jsonxx::Array>("var_vector_of_bool");
    for(int af = 0; af < var_vector_of_bool_array.size(); af++)
    {
      bool var_vector_of_bool_af;
      var_vector_of_bool_af = (bool)var_vector_of_bool_array.get<jsonxx::Boolean>(af);
      output->var_vector_of_bool.push_back(var_vector_of_bool_af);
    }
  }
  if(json.has<jsonxx::Array>("var_vector_of_int"))
  {
    jsonxx::Array var_vector_of_int_array = json.get<jsonxx::Array>("var_vector_of_int");
    for(int af = 0; af < var_vector_of_int_array.size(); af++)
    {
      int32_t var_vector_of_int_af;
      var_vector_of_int_af = (int)var_vector_of_int_array.get<jsonxx::Number>(af);
      output->var_vector_of_int.push_back(var_vector_of_int_af);
    }
  }
  if(json.has<jsonxx::Number>("var_uint08"))
  {
    output->var_uint08 = (unsigned int)json.get<jsonxx::Number>("var_uint08");
  }
  if(json.has<jsonxx::Number>("var_uint16"))
  {
    output->var_uint16 = (unsigned int)json.get<jsonxx::Number>("var_uint16");
  }
  if(json.has<jsonxx::Number>("var_uint32"))
  {
    output->var_uint32 = (unsigned int)json.get<jsonxx::Number>("var_uint32");
  }
  if(json.has<jsonxx::Number>("var_uint64"))
  {
    output->var_uint64 = (unsigned long)json.get<jsonxx::Number>("var_uint64");
  }
  if(json.has<jsonxx::Array>("vector_of_uint08"))
  {
    jsonxx::Array vector_of_uint08_array = json.get<jsonxx::Array>("vector_of_uint08");
    for(int af = 0; af < vector_of_uint08_array.size(); af++)
    {
      uint8_t vector_of_uint08_af;
      vector_of_uint08_af = (unsigned int)vector_of_uint08_array.get<jsonxx::Number>(af);
      output->vector_of_uint08.push_back(vector_of_uint08_af);
    }
  }
  if(json.has<jsonxx::Array>("vector_of_uint16"))
  {
    jsonxx::Array vector_of_uint16_array = json.get<jsonxx::Array>("vector_of_uint16");
    for(int af = 0; af < vector_of_uint16_array.size(); af++)
    {
      uint16_t vector_of_uint16_af;
      vector_of_uint16_af = (unsigned int)vector_of_uint16_array.get<jsonxx::Number>(af);
      output->vector_of_uint16.push_back(vector_of_uint16_af);
    }
  }
  if(json.has<jsonxx::Array>("vector_of_uint32"))
  {
    jsonxx::Array vector_of_uint32_array = json.get<jsonxx::Array>("vector_of_uint32");
    for(int af = 0; af < vector_of_uint32_array.size(); af++)
    {
      uint32_t vector_of_uint32_af;
      vector_of_uint32_af = (unsigned int)vector_of_uint32_array.get<jsonxx::Number>(af);
      output->vector_of_uint32.push_back(vector_of_uint32_af);
    }
  }
  if(json.has<jsonxx::Array>("vector_of_uint64"))
  {
    jsonxx::Array vector_of_uint64_array = json.get<jsonxx::Array>("vector_of_uint64");
    for(int af = 0; af < vector_of_uint64_array.size(); af++)
    {
      uint64_t vector_of_uint64_af;
      vector_of_uint64_af = (unsigned long)vector_of_uint64_array.get<jsonxx::Number>(af);
      output->vector_of_uint64.push_back(vector_of_uint64_af);
    }
  }
  if(json.has<jsonxx::Array>("list_of_uint08"))
  {
    jsonxx::Array list_of_uint08_array = json.get<jsonxx::Array>("list_of_uint08");
    for(int af = 0; af < list_of_uint08_array.size(); af++)
    {
      uint8_t list_of_uint08_af;
      list_of_uint08_af = (unsigned int)list_of_uint08_array.get<jsonxx::Number>(af);
      output->list_of_uint08.push_back(list_of_uint08_af);
    }
  }
  if(json.has<jsonxx::Array>("list_of_uint16"))
  {
    jsonxx::Array list_of_uint16_array = json.get<jsonxx::Array>("list_of_uint16");
    for(int af = 0; af < list_of_uint16_array.size(); af++)
    {
      uint16_t list_of_uint16_af;
      list_of_uint16_af = (unsigned int)list_of_uint16_array.get<jsonxx::Number>(af);
      output->list_of_uint16.push_back(list_of_uint16_af);
    }
  }
  if(json.has<jsonxx::Array>("list_of_uint32"))
  {
    jsonxx::Array list_of_uint32_array = json.get<jsonxx::Array>("list_of_uint32");
    for(int af = 0; af < list_of_uint32_array.size(); af++)
    {
      uint32_t list_of_uint32_af;
      list_of_uint32_af = (unsigned int)list_of_uint32_array.get<jsonxx::Number>(af);
      output->list_of_uint32.push_back(list_of_uint32_af);
    }
  }
  if(json.has<jsonxx::Array>("list_of_uint64"))
  {
    jsonxx::Array list_of_uint64_array = json.get<jsonxx::Array>("list_of_uint64");
    for(int af = 0; af < list_of_uint64_array.size(); af++)
    {
      uint64_t list_of_uint64_af;
      list_of_uint64_af = (unsigned long)list_of_uint64_array.get<jsonxx::Number>(af);
      output->list_of_uint64.push_back(list_of_uint64_af);
    }
  }
  if(json.has<jsonxx::Number>("var_int08"))
  {
    output->var_int08 = (signed int)json.get<jsonxx::Number>("var_int08");
  }
  if(json.has<jsonxx::Number>("var_int16"))
  {
    output->var_int16 = (signed int)json.get<jsonxx::Number>("var_int16");
  }
  if(json.has<jsonxx::Number>("var_int32"))
  {
    output->var_int32 = (int)json.get<jsonxx::Number>("var_int32");
  }
  if(json.has<jsonxx::Number>("var_int64"))
  {
    output->var_int64 = (long long)json.get<jsonxx::Number>("var_int64");
  }
  if(json.has<jsonxx::Array>("vector_of_int8"))
  {
    jsonxx::Array vector_of_int8_array = json.get<jsonxx::Array>("vector_of_int8");
    for(int af = 0; af < vector_of_int8_array.size(); af++)
    {
      int8_t vector_of_int8_af;
      vector_of_int8_af = (signed int)vector_of_int8_array.get<jsonxx::Number>(af);
      output->vector_of_int8.push_back(vector_of_int8_af);
    }
  }
  if(json.has<jsonxx::Array>("vector_of_int16"))
  {
    jsonxx::Array vector_of_int16_array = json.get<jsonxx::Array>("vector_of_int16");
    for(int af = 0; af < vector_of_int16_array.size(); af++)
    {
      int16_t vector_of_int16_af;
      vector_of_int16_af = (signed int)vector_of_int16_array.get<jsonxx::Number>(af);
      output->vector_of_int16.push_back(vector_of_int16_af);
    }
  }
  if(json.has<jsonxx::Array>("vector_of_int32"))
  {
    jsonxx::Array vector_of_int32_array = json.get<jsonxx::Array>("vector_of_int32");
    for(int af = 0; af < vector_of_int32_array.size(); af++)
    {
      int32_t vector_of_int32_af;
      vector_of_int32_af = (int)vector_of_int32_array.get<jsonxx::Number>(af);
      output->vector_of_int32.push_back(vector_of_int32_af);
    }
  }
  if(json.has<jsonxx::Array>("vector_of_int64"))
  {
    jsonxx::Array vector_of_int64_array = json.get<jsonxx::Array>("vector_of_int64");
    for(int af = 0; af < vector_of_int64_array.size(); af++)
    {
      int64_t vector_of_int64_af;
      vector_of_int64_af = (long long)vector_of_int64_array.get<jsonxx::Number>(af);
      output->vector_of_int64.push_back(vector_of_int64_af);
    }
  }
  if(json.has<jsonxx::Array>("list_of_int8"))
  {
    jsonxx::Array list_of_int8_array = json.get<jsonxx::Array>("list_of_int8");
    for(int af = 0; af < list_of_int8_array.size(); af++)
    {
      int8_t list_of_int8_af;
      list_of_int8_af = (signed int)list_of_int8_array.get<jsonxx::Number>(af);
      output->list_of_int8.push_back(list_of_int8_af);
    }
  }
  if(json.has<jsonxx::Array>("list_of_int16"))
  {
    jsonxx::Array list_of_int16_array = json.get<jsonxx::Array>("list_of_int16");
    for(int af = 0; af < list_of_int16_array.size(); af++)
    {
      int16_t list_of_int16_af;
      list_of_int16_af = (signed int)list_of_int16_array.get<jsonxx::Number>(af);
      output->list_of_int16.push_back(list_of_int16_af);
    }
  }
  if(json.has<jsonxx::Array>("list_of_int32"))
  {
    jsonxx::Array list_of_int32_array = json.get<jsonxx::Array>("list_of_int32");
    for(int af = 0; af < list_of_int32_array.size(); af++)
    {
      int32_t list_of_int32_af;
      list_of_int32_af = (int)list_of_int32_array.get<jsonxx::Number>(af);
      output->list_of_int32.push_back(list_of_int32_af);
    }
  }
  if(json.has<jsonxx::Array>("list_of_int64"))
  {
    jsonxx::Array list_of_int64_array = json.get<jsonxx::Array>("list_of_int64");
    for(int af = 0; af < list_of_int64_array.size(); af++)
    {
      int64_t list_of_int64_af;
      list_of_int64_af = (long long)list_of_int64_array.get<jsonxx::Number>(af);
      output->list_of_int64.push_back(list_of_int64_af);
    }
  }
  if(json.has<jsonxx::String>("var_string"))
  {
    output->var_string = (std::string)json.get<jsonxx::String>("var_string");
  }
  if(json.has<jsonxx::Number>("var_float"))
  {
    output->var_float = (float)json.get<jsonxx::Number>("var_float");
  }
  if(json.has<jsonxx::Number>("var_double"))
  {
    output->var_double = (double)json.get<jsonxx::Number>("var_double");
  }
  if(json.has<jsonxx::Number>("var_long"))
  {
    output->var_long = (long long)json.get<jsonxx::Number>("var_long");
  }
  if(json.has<jsonxx::String>("var_in_addr"))
  {
    std::string var_in_addr_str = json.get<jsonxx::String>("var_in_addr");
    int cc = inet_pton(AF_INET, var_in_addr_str.c_str(), &output->var_in_addr);
    if(cc == 0) // Error
      return -32;
  }
  if(json.has<jsonxx::Array>("vector_of_in_addr"))
  {
    jsonxx::Array vector_of_in_addr_array = json.get<jsonxx::Array>("vector_of_in_addr");
    for(int af = 0; af < vector_of_in_addr_array.size(); af++)
    {
      in_addr vector_of_in_addr_af;
      std::string vector_of_in_addr_str = vector_of_in_addr_array.get<jsonxx::String>(af);
      int cc = inet_pton(AF_INET, vector_of_in_addr_str.c_str(), &vector_of_in_addr_af);
      if(cc == 0) // Error
      {
        return -33;
      }
      output->vector_of_in_addr.push_back(vector_of_in_addr_af);
    }
  }
  if(json.has<jsonxx::Array>("list_of_in_addr"))
  {
    jsonxx::Array list_of_in_addr_array = json.get<jsonxx::Array>("list_of_in_addr");
    for(int af = 0; af < list_of_in_addr_array.size(); af++)
    {
      in_addr list_of_in_addr_af;
      std::string list_of_in_addr_str = list_of_in_addr_array.get<jsonxx::String>(af);
      int cc = inet_pton(AF_INET, list_of_in_addr_str.c_str(), &list_of_in_addr_af);
      if(cc == 0) // Error
      {
        return -34;
      }
      output->list_of_in_addr.push_back(list_of_in_addr_af);
    }
  }
  if(json.has<jsonxx::Array>("vc"))
  {
    jsonxx::Array vc_array = json.get<jsonxx::Array>("vc");
    for(int af = 0; af < vc_array.size(); af++)
    {
      float vc_af;
      vc_af = (float)vc_array.get<jsonxx::Number>(af);
      output->vc.push_back(vc_af);
    }
  }
  std::cout << "fromJson: map_uint8_t_string_map...." << std::endl;
  if(json.has<jsonxx::Array>("map_uint8_t_string_map"))
  {
    jsonxx::Array map_uint8_t_string_map_map_array = json.get<jsonxx::Array>("map_uint8_t_string_map");
    for(int af = 0; af < map_uint8_t_string_map_map_array.size(); af++)
    {
      jsonxx::Object map_uint8_t_string_map_map_array_entry = map_uint8_t_string_map_map_array.get<jsonxx::Object>(af);
      uint8_t map_key;
      std::string map_val;
      if(map_uint8_t_string_map_map_array_entry.has<jsonxx::Number>("key"))
      {
        map_key = map_uint8_t_string_map_map_array_entry.get<jsonxx::Number>("key");
      }
      if(map_uint8_t_string_map_map_array_entry.has<jsonxx::String>("val"))
      {
        map_val = map_uint8_t_string_map_map_array_entry.get<jsonxx::String>("val");
      }
      output->map_uint8_t_string_map[map_key] = map_val;
    }
  }
  std::cout << "fromJson: map_uint8_t_add_drop_map...." << std::endl;
  if(json.has<jsonxx::Array>("map_uint8_t_add_drop_map"))
  {
    jsonxx::Array map_uint8_t_add_drop_map_map_array = json.get<jsonxx::Array>("map_uint8_t_add_drop_map");
    for(int af = 0; af < map_uint8_t_add_drop_map_map_array.size(); af++)
    {
      jsonxx::Object map_uint8_t_add_drop_map_map_array_entry = map_uint8_t_add_drop_map_map_array.get<jsonxx::Object>(af);
      uint8_t map_key;
      AddDrop map_val;
      if(map_uint8_t_add_drop_map_map_array_entry.has<jsonxx::Number>("key"))
      {
        map_key = map_uint8_t_add_drop_map_map_array_entry.get<jsonxx::Number>("key");
      }
      if(map_uint8_t_add_drop_map_map_array_entry.has<jsonxx::Object>("val"))
      {
        if(fromJson(&map_val, map_uint8_t_add_drop_map_map_array_entry.get<jsonxx::Object>("val").json()) != 0)
        {
          return -37;
        }
      }
      output->map_uint8_t_add_drop_map[map_key] = map_val;
    }
  }
  if(json.has<jsonxx::Array>("vector_of_string"))
  {
    jsonxx::Array vector_of_string_array = json.get<jsonxx::Array>("vector_of_string");
    for(int af = 0; af < vector_of_string_array.size(); af++)
    {
      std::string vector_of_string_af;
      vector_of_string_af = vector_of_string_array.get<jsonxx::String>(af);
      output->vector_of_string.push_back(vector_of_string_af);
    }
  }
  if(json.has<jsonxx::Array>("list_of_string"))
  {
    jsonxx::Array list_of_string_array = json.get<jsonxx::Array>("list_of_string");
    for(int af = 0; af < list_of_string_array.size(); af++)
    {
      std::string list_of_string_af;
      list_of_string_af = list_of_string_array.get<jsonxx::String>(af);
      output->list_of_string.push_back(list_of_string_af);
    }
  }
  if(json.has<jsonxx::Array>("vector_of_enum_adddrop_type"))
  {
    jsonxx::Array vector_of_enum_adddrop_type_array = json.get<jsonxx::Array>("vector_of_enum_adddrop_type");
    for(int af = 0; af < vector_of_enum_adddrop_type_array.size(); af++)
    {
      AddDropType vector_of_enum_adddrop_type_af;
      // Fraq - enumeration is false/true not 0/1
      if(fromString(vector_of_enum_adddrop_type_array.get<jsonxx::String>(af),&vector_of_enum_adddrop_type_af) == false)
      {
        return -40;
      }
      output->vector_of_enum_adddrop_type.push_back(vector_of_enum_adddrop_type_af);
    }
  }
  if(json.has<jsonxx::Array>("list_of_enum_adddrop_type"))
  {
    jsonxx::Array list_of_enum_adddrop_type_array = json.get<jsonxx::Array>("list_of_enum_adddrop_type");
    for(int af = 0; af < list_of_enum_adddrop_type_array.size(); af++)
    {
      AddDropType list_of_enum_adddrop_type_af;
      // Fraq - enumeration is false/true not 0/1
      if(fromString(list_of_enum_adddrop_type_array.get<jsonxx::String>(af),&list_of_enum_adddrop_type_af) == false)
      {
        return -41;
      }
      output->list_of_enum_adddrop_type.push_back(list_of_enum_adddrop_type_af);
    }
  }
  if(json.has<jsonxx::Array>("set_of_enum_adddrop_type"))
  {
    jsonxx::Array set_of_enum_adddrop_type_array = json.get<jsonxx::Array>("set_of_enum_adddrop_type");
    for(int af = 0; af < set_of_enum_adddrop_type_array.size(); af++)
    {
      AddDropType set_of_enum_adddrop_type_af;
      // Fraq - enumeration is false/true not 0/1
      if(fromString(set_of_enum_adddrop_type_array.get<jsonxx::String>(af),&set_of_enum_adddrop_type_af) == false)
      {
        return -42;
      }
      output->set_of_enum_adddrop_type.insert(set_of_enum_adddrop_type_af);
    }
  }
  return 0;
}
#endif // ___cplusplus


#endif // __IMPLEMENTATION_SIMPLE_H__
